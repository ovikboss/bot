from aiogram import Bot, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.enums import ParseMode

from state import NameDate
from logger import logger
from db import db

from .rout import router


# Create inline keyboard for language selection
language_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang:en"),
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru"),
        ]
    ]
)

language_keyboard_2 = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="Lang:en"),
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="Lang:ru"),
        ]
    ]
)


@router.message(Command("language"))
async def language_command(message: types.Message):
    await message.reply(text = "select language" , reply_markup = language_keyboard)

@router.callback_query(lambda c: c.data.startswith("lang:en"))
async def set_en(query: types.CallbackQuery):
    language_code = query.data.split(":")[1]
    db.set_user_language(
        telegram_id=query.from_user.id, language_code=language_code
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫!



@router.callback_query(lambda c: c.data.startswith("lang:ru"))
async def set_ru(query: types.CallbackQuery):
    language_code = query.data.split(":")[1]
    db.set_user_language(
        telegram_id=query.from_user.id, language_code=language_code
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫!



@router.callback_query(NameDate.language, lambda c: c.data.startswith("Lang:"))
async def language_callback(query: types.CallbackQuery, state: FSMContext):
    """Handles language selection callback."""
    try:
        language_code = query.data.split(":")[1]
        # Validate the language code.

        db.set_user_language(
            telegram_id=query.from_user.id, language_code=language_code
        )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫!
        await state.update_data(language=language_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ FSM
        if language_code == "ru":
            await query.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {language_code} —è–∑—ã–∫!\n–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥—ë–º –≤–∞—à–µ–≥–æ –∞—Å—Ç—Ä–æ-–±–ª–∏–∑–Ω–µ—Ü–∞! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è",
                reply_markup=None,
            )  # –í—ã–≤–æ–¥–∏–º —è–∑—ã–∫
        else:
            await query.message.edit_text(
                f"You have selected {language_code} language!\nLet‚Äôs find your astro-twin! Please, enter your name",
                reply_markup=None,
            )  # –í—ã–≤–æ–¥–∏–º —è–∑—ã–∫
        await state.set_state(NameDate.name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {e}")
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞.")
    finally:
        await query.answer()  # To remove the loading.
